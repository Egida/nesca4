# OldTeam & Lomaster                                                                      [May 2023]
# NESCA4 Reference Guide                                                                  [RU]
                                        Содержание                        

                1  Введение...............................................10
                       1.1 База...............................18
                       1.2 Что это такое?.....................54
                       1.3 Написание..........................54
                2  Установка цели.........................................51
                       2.1 База...............................66
                       2.2 Из файла...........................87
                       2.3 Как это работает...................97
                3  Сканирование...........................................89
                       3.1 База...............................107
                       3.2 Аргументы для работы с ним.........180
                4  Пинг...................................................89
                       4.1 База...............................
                       4.2 Методы.............................
                5. Брутфорс...............................................
                       5.1 База...............................
                       5.2 Таймаут............................
                       5.2 Потоки.............................
                6. DNS сканирование.......................................
                       6.1 База...............................       
                       6.1 Аргументы для работы с ним.........       
                7. Тестирование...........................................
                       7.1 База...............................
                       7.1 Аргументы для работы с ним..........       

                                        Введение

        "NESCA4" не официальное продолжение "nesca3", само название nesca являеться
        сокращением от слова NETwork SCAnner, "nesca3" была разработа нетсталкерской
        группой "ISKOPASI" как универсальный сканер всего сущего в интернете, с брут
        форсом, удобной сортировкой, и одной из главных фишек была именно база находок.
        Вы могли залить все свои находки на общий сайт, где их могли смотреть уже дру
        гие люди. Также в ней присутствовал очень oldschool-ный и хакерский GUI.
        И у неё были все шансы пробиться выше, но сам код, неподдержиность, баги,
        школьники) скатили её. И был выложен весь исходный код, 90% которого не чи
        таем, и даже можно сказать что у человека который её писал, случались приступы
        эпилепсии. В некоторых файлах действительно АДСКАЯ дрочильня: Некоторые строчки
        сдвинуты на 6-18 табов, пустые функции, неопределённость стиля кода, стиля
        переменных, уязвимости, утечки памяти, постоянная смена подхода.
                ^Более подробный разбор тут https://github.com/enemy-submarine/nesca_audit

        Хорошо в ней они реализовали только дизайн, и я всё таки поставил задачу перепи
        сать её. Было это ошибкой или нет, но при написании, я не зализал в оригинальный
        код не разу, легче писать с нуля, чем читать это, или тем более пытаться разширять.
        Но даже смотря на ужастный код в "nesca3", они смогли реализовать,
        сложную программу еле зная сам язык. И единственные в своём роде реализации
        брутфорса RVI, получение перенаправления, брутфорс HTTP BASIC + DIGEST аунтификации,
        и др. Я уже не помню. Так если ещё брать в счёт что она была написана в 2015 году
        без гайдов, и скорее всего без интернета :), нужно было очень глубоко знать работу сети.

        И иметь понимание очень андергаундных методов, которым мне пришлось тоже
        овладеть.

    1.2 Что это такое?
        Nesca4 это сканер портов, брутфорсер, сканер DNS, тестер сети, и сборщик почти
        всей доступной информации в CLEAR & DEEP net-е. Написанная специально для 
        NETSTALKING-а, и OldTeam. Да и просто допилинная "nesca3".

        Но всё таки она соснула у "nesca3" в интерфейсе, в "nesca4" он тут консольный
        сама она по своей сути является утилитой, с аргументами, которых стало уже слишком
        много, что пришлось писать это.

    1.3 Написание
        Дело в том что когда, я начинал писать её, я проктический ничего не знал про
        то как работает сеть, не то что сокеты, и работу протоколов транспортного уровня,
        а вообще почти ничего. Я думаю уже понятно зачем я начал это, что бы научиться
        работать с сетью и получить более глубоково познания о c++.

                                      Установка цели 

        Под целью я имею ввиду ip, cidr, ip диапазоны которые вы будете сканировать.
        В "nesca4" есть возможно взять это из файла, или указать прямо при старте программы.

        sudo ./nesca4 192.1.1.1

        Для всех них действует возможность указать несколько через запятую без пробела пример:

        sudo ./nesca4 192.1.1.1,192,4,4,5

        Также есть возможность установить рандомные айпи, их сгенерирует сама nesca, сразу скажу
        что если попадёться ip пинтагона, я не причём.

        -random-ip                  | Указать в качестве цели рандомные айпи.
        
        В параметр передаёться количество рандомных айпи.

    2.2 Из файла.
        Как я уже говорил можно взять цели из файла, и сделать можно это с помощью этих аргументов:
        
        -import-ip                         | Установить в качестве цели ip версии 4 из файла.
        -import-cidr                       | Установить в качестве цели CIDR aka подсеть, из файла.
        -import-range                      | Указать в качестве цели IP диапазон, из файла.

        К этим аргументам в качестве параметра идёт путь к файлу из которого вы хотите взять
        свои цели.

    2.3 Как работает?
        Смысл в том что cidr и ip диапазоны, нужны что-бы просто засунуть в них сразу много айпи.
        При получении их, неска просто разшифровывает их в обычные айпи.


                                        Сканирование

        Когда я только начинал её писать, я решил выбрать самый просто TCP, пока не
        столкнулся, с багом бесокнечного цикла, когда сканирование могло просто зависнуть.
        Честно говоря я до конца не понял почему, может из-за сраного select или poll.
        Но я нашёл только одно решение, сменить метод. Сразу на самый сложный :).

        Попыток его написать у меня было наверно 10-20. И всё же я смог, бессмертный TCP SYN.
        О работе которого я буду щас рассказывать.

        Итак, его главная фишка в установки неполного, или же фейкового подлкючения к хосту,
        которое выполняеться за счёт псевдо TCP заголовка. Мы заполняем не настоящие данные
        для подлючения и тем самым обманываем удалённую машину. Уже даже для этого нужно
        использывать RAW сокеты aka сырые. Они позволяют вам почуствовать какого это,
        заполнять обосанные IP, TCP заголовки, ручная обработка ответа, ручной подсчёт
        контрольных сум IP и TCP пакета и конечно установка таймаута вначале функции через sleep.

        Другими словами предлагают максимально глубокую работу с сетью. За счёт которой мы и
        можем реализовать SYN сканирование. 

        Процесс выполнения SYN сканирования:
        |------------------------------------------------------------------------------------
        | 0. Задержка основого таймаута.
        | 1. Создание RAW сокета для отправки пакета.
        | 2. Заполнение IP заголовка.
        | 3. Подсчёт контрольной суммы IP.
        | 4. Заполнение TCP заголовка.
        | 5. Указ ядру на запрет самовольного заполнения IP заголовка.
        | 6. Заполнение фейкового заголовка TCP для подлючения. 
        | 7. Подсчёт контрольной суммы TCP заголовка.
        | 8. Отправка пакета.
        \
         |-----------------------------------------------------------------------------------
         | 0. Создание RAW сокета для получения пакета.
         | 1. Установка таймаута для получения пакета.
         | 2. Получение пакета.
         | 3. Обработка флага и определение статуса порта.
         |-----------------------------------------------------------------------------------
        /
        |------------------------------------------------------------------------------------
       
        Фишки и некоторые моменты:
        |------------------------------------------------------------------------------------
        |`tcph->syn=1;`
            Тут одна из основных смыслов заполнение TCP заголовка, это его заполнение с флагом SYN.
            Тем самым определяя тип пакета на SYN.

        |`iph->ttl = 255;`
            В айпи заголовка указания время жизни в 255. Максимальное значение, для максимальной
            давки таймаута, что бы можно было ставить его максимально маленьким.

        |`iph->check = csum ((unsigned short *) datagram, iph->tot_len >> 1);`
        |`tcph->check = csum( (unsigned short*) &psh , sizeof (struct pseudo_header));`
            Вычисление контрольных сумм, согласно с RFC 1071. Для IP и TCP заголовков.
        |------------------------------------------------------------------------------------
        
        Сама обработка пакета.
        |------------------------------------------------------------------------------------
        | SYN/ACK   0x12 Порт доступен
        | PSH       0x08 Порт доступен и передаёт данные (PUSH)
        | RST       0x04 Соеденнение было сброшено (RESET)
        |------------------------------------------------------------------------------------
        | 1. Если хост ответил флагами SYN и ACK порт открыт.
        | 2. Если хост ответил флагами SYN, ACK и PSH порт открыт с передачей.
        | 3. Если хост ответил флагом RST занчит порт закрыт.
        | 4. Если хост ответил ничем из этого значит порт фильтрован.
        |------------------------------------------------------------------------------------

        Это много но не достаточно, ведь я пишу с орентиром на nmap, которые перед сканированием
        выполняет ping сканирование, провека хоста на доступность милионами методом ping-а.

        И если оно не прошло то nmap предлогает провести сканирование без ping-а, но тогда все
        порты будут определены как filtered понимаете к чему я. Пока в nesca4 только один метод пинга
        оригинальный icmp ping. Но дальше больше.

    3.2 Аргументы для работы с ним.
        -p, -ports                  | Указать порты для сканирования.
            |-------------------------^^^^^^^^----
            | Можно указать через запятую без пробела - 80,21,443.
            | Также можно указать диапазон портов, через тире - 0-65535.
            |
            \ И ещё есть готовые шаблоны портов:
             \-------------------------------------
              | http - все порты протокола HTTP.
              | nesca - все порты по стандарту с "nesca3".
              | top100 - топ 100 портов по популярности.
              | top50 - аналогичто только 50 портов.
              |------------------------------------

        |----------Работает и для DNS сканирования------------|
        -t, -timeout                | Изменить таймаут, в мс.
        -T, -threads                | Изменить кол. потоков.
        |-----------------------------------------------------|

        -syn-db, -syn-debug         | Включение более подробной инофрмации при SYN сканирование.
        -db, -debug                 | Показывать закрытые и отфильтрованные порты.
        -er, -error                 | Показывать ошибки при сканирование.
        -sss-timeout                | Изменить таймаута для отправки пакета, максимальное её время.
        -ssr-timeout                | Изменить таймаута для принятия пакета, максимальное его время.
        
        Стандартные параметры выглядят так:
        |-------------------------------------|
        | -t, -timeout              | 180ms
        | -T, -threads              | 100
        | -p, -port                 | N/A
        | -syn-db, -syn-debug       | false
        | -er, -error               | false
        | -db, -debug               | false
        | -sss-timeout              | 6s
        | -ssr-timeout              | 6s
        |-------------------------------------|
        
         


